#+TITLE: My GNU Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel, based on [[https://gitlab.com/buildfunthings/emacs-config/blob/master/loader.org][buildfunthings]]
#+TAGS: emacs
#+CATEGORIES: editing

* Introduction

This file is based on [[https://gitlab.com/buildfunthings/emacs-config/blob/master/loader.org][buildfunthings]] emacs config.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "John Nelson")
  (setq user-mail-address "jnelson@johncoder.com")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)

  (defvar johncoder/tweaking t)

  (defun johncoder/reload ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))

  (when johncoder/tweaking
    (global-set-key (kbd "C-|") 'johncoder/reload))
#+END_SRC

** Hiding Customization

Picked this up from a friend. [[https://www.emacswiki.org/emacs/CustomFile][Custom File]]. Change the location that Emacs will write out customizations to. The advice is to never modify it by hand.

#+BEGIN_SRC emacs-lisp
(setf custom-file "~/.emacs.d/emacs-auto-custom.el")
(load custom-file t)
#+END_SRC
** A secure Emacs Environment

#+BEGIN_SRC emacs-lisp

;; (require 'cl)
;; (setq tls-checktrust t)

;; (setq python (or (executable-find "py.exe")
;;                  (executable-find "python")))

;; (let ((trustfile
;;       (replace-regexp-in-string
;;         "\\\\" "/"
;;         (replace-regexp-in-string
;;          "\n" ""
;;          (shell-command-to-string (concat python " -m certifi"))))))
;;   (setq tls-program
;;         (list
;;          (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
;;                  (if (eq window-system 'w32) ".exe" "") trustfile)))
;;   (setq gnutls-verify-error t)
;;   (setq gnutls-trustfiles (list trustfile)))
#+END_SRC


** Laundry List
Try out [[https://github.com/yuya373/emacs-slack][emacs-slack]].
* Installing use-package
** Setup
There are several package archives available:
- GNU
- Marmalade
- Melpa

Each archive will write its files in a separate archive directory.

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (when (eq system-type 'windows-nt)
    (setenv "PATH" (concat "E:/msys64/usr/bin;" (getenv "PATH")))
    (push "E:/msys64/usr/bin;" exec-path))
#+END_SRC

#+NAME: credmp-package-infrastructure
#+BEGIN_SRC emacs-lisp
  (setq package-archives nil)

  (defvar melpa '("melpa" . "http://melpa.milkbox.net/packages/"))
  (defvar org-elpa '("org" . "http://orgmode.org/elpa/"))
  (defvar elpa '("elpa" . "http://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives melpa t)
  (add-to-list 'package-archives org-elpa t)
  (add-to-list 'package-archives elpa t)
  ;; (defvar melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))
  ;; (add-to-list 'package-archives melpa-stable t)
  ;; (defvar melpa '("melpa" . "https://melpa.org/packages/"))
  ;; (add-to-list 'package-archives melpa t)
  ;; (defvar gnu '("gnu" . "http://elpa.gnu.org/packages/"))
  ;; (add-to-list 'package-archives gnu t)
  ;; (defvar org-elpa '("org" . "http://orgmode.org/elpa/"))
  ;; (add-to-list 'package-archives org-elpa t)
#+END_SRC

Initialize the archive and refresh the contents in case there is no cached archive.

#+BEGIN_SRC emacs-lisp
  (package-initialize)

  ;; NOTE(john): This is the majority of startup speed time. For some
  ;; reason the melpa-stable one doesn't appear for me, but I assume it
  ;; has to do with Windows? When the melpa-stable item was missing it
  ;; would always try to refresh package contents.
  (unless (and (file-exists-p (concat init-dir "elpa/archives/gnu"))
               (file-exists-p (concat init-dir "elpa/archives/melpa")))
               ;; (file-exists-p (concat init-dir "elpa/archives/melpa-stable")))
    (package-refresh-contents))
#+END_SRC

Each time this file is loaded the list will be evaulated, and install any missing packages.

#+NAME: credmp-package-installer
#+BEGIN_SRC emacs-lisp
  (defun packages-install (&rest packages)
    (message "running packages-install")
    (mapc (lambda (package)
            (let ((name (car package))
                  (repo (cdr package)))
              (when (not (package-installed-p name))
                (let ((package-archives (list repo)))
                   (package-initialize)
                   (package-install name)))))
           packages)
    (package-initialize)
    (delete-other-windows))
#+END_SRC

** The package

Install extensions if they're missing

#+NAME: credmp-package-installer
#+BEGIN_SRC emacs-lisp
  (defun init--install-packages ()
    (message "Let's install some packages")
     (packages-install
      ;; this is the only entry here because use-package is used later
      (cons 'use-package melpa)))
  (condition-case nil
      (init--install-packages)
    (error
     (package-refresh-contents)
     (init--install-packages)))
  (require 'use-package)
#+END_SRC

* Internals
This section is about the internal behavior of Emacs.

** Backup

The default behavior of Emacs is to litter the same directory with temporary files. It looks like auto-save is enabled here, so we'll see how long I tolerate that for.

#+BEGIN_SRC emacs-lisp
  (defvar --backup-directory (concat init-dir "backups"))

  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))

  (setq backup-directory-alist `(("." . ,--backup-directory)))
  (setq make-backup-files t               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default t               ; auto-save every buffer that visits a file
        auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
    )

    ;; (setq delete-by-moving-to-trash t
    ;;       trash-directory "~/.Trash/emacs")

    (setq backup-directory-alist `(("." . ,(expand-file-name
                                            (concat init-dir "backups")))))
#+END_SRC

** Opening Files

#+BEGIN_SRC emacs-lisp
;; (setq ns-pop-up-frames nil)
#+END_SRC
** Platform Specific
When using dired on MacOS, you get an error like =ls does not support --dired=. See [[https://stackoverflow.com/questions/25125200/emacs-error-ls-does-not-support-dired][this question on SO]].
#+BEGIN_SRC emacs-lisp
(when (string= system-type "darwin")
  (setq dired-use-ls-dired nil))
#+END_SRC
* Look and feel

Ditch the lousy bars and obnoxious bell.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (defun my-bell-function ())
  (setq ring-bell-function 'my-bell-function)
  (setq visible-bell nil)
  (setq column-number-mode t)
  (setq-default cursor-type 'bar)

  (put 'narrow-to-region 'disabled nil)
#+END_SRC

#+NAME: credmp-package-installer
#+BEGIN_SRC emacs-lisp
  ;; (use-package base16-theme
  ;;  :ensure t
  ;;  :config
  ;;  (load-theme 'base16-grayscale-dark t))
  ;;(use-package atom-one-dark-theme
  ;;  :ensure t
  ;;  :config
  ;;  (load-theme 'atom-one-dark t))
  ;;(use-package sublime-themes
  ;;  :ensure t
  ;;  :config
  ;;  (load-theme 'mccarthy t))
  ;;(use-package github-theme
  ;;  :ensure t
  ;;  :config
  ;;  (load-theme 'github t))
  (use-package arjen-grey-theme
    :ensure t
    :config
    (load-theme 'arjen-grey t))
  ;; (use-package eink-theme
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'eink t))
  (if (eq system-type 'windows-nt)
      (set-face-attribute 'default nil :font "Consolas" :height 140))
  (if (eq system-type 'darwin)
      (set-face-attribute 'default nil :font "Inconsolata" :height 140))
  (set-face-attribute 'default nil :height 120)
#+END_SRC

** Icons

Screen real estate is precious, so iconography seems worthwhile to try. This package provides icons that can be used in other configurations.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC

** Mode Line

I really wanted to try and make [[https://github.com/domtronn/all-the-icons.el/wiki/Mode-Line][all-the-icons mode line]] work, but it eludes me. Instead I'm punting and going with [[https://github.com/domtronn/spaceline-all-the-icons.el][spaceline-all-the-icons]].

#+BEGIN_SRC emacs-lisp
  (use-package mode-icons
    :ensure t
    :config
    (mode-icons-mode t))

  ;; (use-package spaceline
  ;;  :ensure t)
  ;; (use-package spaceline-all-the-icons
  ;;   :ensure t
  ;;   :after spaceline
  ;;   :config (spaceline-all-the-icons-theme))
#+END_SRC

** Editor
#+BEGIN_SRC emacs-lisp
    ;; (use-package linum
    ;;   :ensure t
    ;;   :config ())
    ;; (add-hook 'find-file-hook (lambda () (linum-mode 1)))
    (delete-selection-mode)

  ;; (use-package centered-window
  ;;   :ensure t
  ;;   :config
  ;;   (centered-window-mode t))
  ;; (use-package centered-cursor-mode
  ;;   :ensure t
  ;;   :config
  ;;   (global-centered-cursor-mode t))
#+END_SRC

** Moving Around
*** Bookmarks
#+BEGIN_SRC emacs-lisp
  (use-package bm
    :ensure t
    :bind (("C-c =" . bm-toggle)
           ("C-c [" . bm-previous)
           ("C-c ]" . bm-next)))
#+END_SRC

*** Ivy/Counsel/Swiper

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-x" . counsel-M-x)
     ("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

   (use-package swiper
     ;; :pin melpa-stable
     :diminish ivy-mode
     :ensure t
     :bind*
     (("C-s" . swiper)
      ("C-c C-r" . ivy-resume)
      ("C-x C-f" . counsel-find-file)
      ("C-c h f" . counsel-describe-function)
      ("C-c h v" . counsel-describe-variable)
      ("C-c i u" . counsel-unicode-char)
      ("M-i" . counsel-imenu)
      ("C-c g" . counsel-git)
      ("C-c j" . counsel-git-grep)
      ("C-c k" . counsel-ag)
      ("C-c l" . scounsel-locate))
     :config
     (progn
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (define-key read-expression-map (kbd "C-r") #'counsel-expression-history)
       (ivy-set-actions
        'counsel-find-file
        '(("d" (lambda (x) (delete-file (expand-file-name x)))
           "delete"
           )))
       (ivy-set-actions
        'ivy-switch-buffer
        '(("k"
           (lambda (x)
             (kill-buffer x)
             (ivy--reset-state ivy-last))
           "kill")
          ("j"
           ivy--switch-buffer-other-window-action
           "other window")))))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))

  (use-package ivy-hydra :ensure t)
#+END_SRC
*** Beginning of Line
Defines a different behavior for `C-a`, moving to the first character
instead of the true beginning of the line. If the cursor is already at
the logical beginning of the line it will jump to the actual beginning
of the line. From: [[http://pages.sachachua.com/.emacs.d/Sacha.html#org5564fb9][sachachua.com/.emacs.d]]

#+BEGIN_SRC emacs-lisp
  (defun my/smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'my/smarter-move-beginning-of-line)
#+END_SRC

** Sounds
Someday, maybe.
* Productivity
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib)

  (require 'org-habit)

  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
  (define-key global-map "\C-cl" 'org-store-link)

  (setq org-agenda-files (list "~/org"))

  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'org-display-inline-images)

  (setq org-timer-done-hook nil)
  (when (eq system-type 'darwin)
    (add-hook 'org-timer-done-hook
              (lambda ()
                (shell-command "afplay -v 5 ~/Downloads/level-up.mp3"))))

  (setf org-refile-targets '((org-agenda-files :maxlevel . 2))
        org-startup-indented t
        org-agenda-span 'day
        ;; org-log-into-drawer t
        org-clock-idle-time 10
        org-return-follows-link t
        org-special-ctrl-a/e t
        org-pretty-entities t
        org-pretty-entities-include-sub-superscripts t
        org-agenda-skip-scheduled-if-deadline-is-shown t
        org-drill-learn-fraction 0.3
        org-log-done 'time)
  (add-to-list 'org-modules 'org-habit t)
  (setq org-habit-graph-column 80)
#+END_SRC

** Capture Templates

| Placeholder | Description                 |
|-------------+-----------------------------|
| %U          | Inactive timestamp          |
| ~%^{Name}~  | Prompt for something        |
| %a          | Annotation (org-store-link) |
| %i          | Active region               |
| %?          | Cursor ending location      |

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
           ("a" "Agenda Item"          entry (file+headline "~/org/agenda.org" "inbox") "* TODO %?\nSCHEDULED: %T\n")
           ("c" "Clock item"           item  (clock) "  - %i%?")
           ("w" "Work Note"            entry (file+headline "~/org/work.org" "inbox") "* TODO %?\n")
           ("j" "Append journal entry" entry (file+datetree "~/org/journal.org")      "* %U %^{Title}\n%?")
           ("t" "Micro Blog Entry"     plain (file "~/org/micro-blog.org")   "* %U by @johncoder\n%?" :prepend t :kill-buffer t)
          ))
#+END_SRC


* Version Control

#+NAME: magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-c m") 'magit-status))
#+END_SRC

* Programming
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t)
  (use-package ob-restclient
    :ensure t)
  (use-package dumb-jump
    :ensure t
    :config
    (global-set-key (kbd "<f12>") 'dumb-jump-go)
    (global-set-key (kbd "C-S-<f12>") 'pop-tag-mark))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq c-default-style "bsd"
        c-basic-indent 4
        c-basic-offset 4
        tab-width 4
        indent-tabs-mode nil)
#+END_SRC
** Lisp
#+BEGIN_SRC emacs-lisp
(use-package slime
  :ensure t)

(use-package clojure-mode
  :ensure cider)

(let ((quicklisp-filename "~/quicklisp/slime-helper.el"))
  (when (file-exists-p quicklisp-filename)
    (load (expand-file-name quicklisp-filename)))
    (setq inferior-lisp-program "/usr/bin/sbcl"))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  ;(setq python-shell-interpreter "nix-shell python")
  (use-package python-info
    :ensure t)
  (setq python-shell-completion-native-enable nil)
#+END_SRC

** C/C++

** C#

#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode
    :ensure t)
#+END_SRC

** JavaScript
#+BEGIN_SRC emacs-lisp
  (use-package jsx-mode
    :ensure t)
  (add-hook 'js-mode-hook (lambda () (setq js-indent-level 2)))
  (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2)))
#+END_SRC

** Markup
#+BEGIN_SRC emacs-lisp
  ;; (use-package handlebars-mode
  ;;   :ensure t)
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.hbs?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.(cs|vb)*html?\\'" . web-mode))

    (defun my-web-mode-hook ()
      "Hooks for Web Mode."
      (setq web-mode-enable-auto-closing t)
      (setq web-mode-enable-auto-quoting t)
      (setq web-mode-markup-indent-offset 2))

    (add-hook 'web-mode-hook 'my-web-mode-hook))
#+END_SRC

** PostgreSQL
In the past I have used [[https://www.pgadmin.org/][pgAdmin]], but I want something right in emacs.

The default connection prompts do not include a port number, thus include it ([[https://stackoverflow.com/questions/12613/specify-a-port-number-in-emacs-sql-mysql][source]]):

#+BEGIN_SRC emacs-lisp
  ;; (use-package sql-postgres
  ;;  :ensure t
  ;;  :init
  ;;  (progn
  ;;    (require 'sql)
  ;;    (add-to-list 'sql-postgres-login-params '(port))))
  (require 'sql)
  (add-to-list 'sql-postgres-login-params '(port))
#+END_SRC

** Docker
This was immediately helpful in managing docker containers from within emacs. 10/10, so far!
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t)
  (use-package dockerfile-mode
    :ensure t)
  (use-package docker-tramp
    :ensure t)
#+END_SRC

** SQL

#+BEGIN_SRC emacs-lisp
  (add-hook 'sql-interactive-mode-hook (lambda ()
                                           (toggle-truncate-lines t)))
#+END_SRC
* Keybindings
** Other Window
#+BEGIN_SRC emacs-lisp
  (defun other-window-prev ()
    (interactive)
    (other-window) -1)
#+END_SRC
** Set
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-<tab>") 'other-window)
  (global-set-key (kbd "C-S-<tab>") 'other-window-prev)
  (global-set-key (kbd "<f5>") 'compile)
  (global-set-key (kbd "C-<f5>") 'next-error)
  (global-set-key (kbd "C-S-<f5>") 'previous-error)
#+END_SRC
