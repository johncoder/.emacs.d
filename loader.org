#+TITLE: My GNU Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel, based on [[https://gitlab.com/buildfunthings/emacs-config/blob/master/loader.org][buildfunthings]]
#+TAGS: emacs
#+CATEGORIES: editing

* Introduction

This file is based on [[https://gitlab.com/buildfunthings/emacs-config/blob/master/loader.org][buildfunthings]] emacs config.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "John Nelson")
(setq user-mail-address "jnelson@johncoder.com")
(setq org-src-fontify-natively t)
#+END_SRC

** A secure Emacs Environment

#+BEGIN_SRC emacs-lisp

;; (require 'cl)
;; (setq tls-checktrust t)

;; (setq python (or (executable-find "py.exe")
;;                  (executable-find "python")))

;; (let ((trustfile
;;       (replace-regexp-in-string
;;         "\\\\" "/"
;;         (replace-regexp-in-string
;;          "\n" ""
;;          (shell-command-to-string (concat python " -m certifi"))))))
;;   (setq tls-program
;;         (list
;;          (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
;;                  (if (eq window-system 'w32) ".exe" "") trustfile)))
;;   (setq gnutls-verify-error t)
;;   (setq gnutls-trustfiles (list trustfile)))
#+END_SRC

* Installing use-package
** Setup
There are several package archives available:
- GNU
- Marmalade
- Melpa

Each archive will write its files in a separate archive directory.

#+BEGIN_SRC emacs-lisp
(require 'package)

(if (eq system-type 'windows-nt)
  (setenv "PATH" (concat "E:/msys64/usr/bin;" (getenv "PATH"))))
(push "E:/msys64/usr/bin;" exec-path)
#+END_SRC

#+NAME: credmp-package-infrastructure
#+BEGIN_SRC emacs-lisp
(setq package-archives nil)

(defvar melpa '("melpa" . "http://melpa.milkbox.net/packages/"))
(add-to-list 'package-archives melpa t)
;; (defvar melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))
;; (add-to-list 'package-archives melpa-stable t)
;; (defvar melpa '("melpa" . "https://melpa.org/packages/"))
;; (add-to-list 'package-archives melpa t)
;; (defvar gnu '("gnu" . "http://elpa.gnu.org/packages/"))
;; (add-to-list 'package-archives gnu t)
;; (defvar org-elpa '("org" . "http://orgmode.org/elpa/"))
;; (add-to-list 'package-archives org-elpa t)
#+END_SRC

Initialize the archive and refresh the contents in case there is no cached archive.

#+BEGIN_SRC emacs-lisp
  (package-initialize)

  ;; NOTE(john): This is the majority of startup speed time. For some
  ;; reason the melpa-stable one doesn't appear for me, but I assume it
  ;; has to do with Windows? When the melpa-stable item was missing it
  ;; would always try to refresh package contents.
  (unless (and (file-exists-p (concat init-dir "elpa/archives/gnu"))
               (file-exists-p (concat init-dir "elpa/archives/melpa")))
               ;; (file-exists-p (concat init-dir "elpa/archives/melpa-stable")))
    (package-refresh-contents))
#+END_SRC

Each time this file is loaded the list will be evaulated, and install any missing packages.

#+NAME: credmp-package-installer
#+BEGIN_SRC emacs-lisp
(defun packages-install (&rest packages)
  (message "running packages-install")
  (mapc (lambda (package)
          (let ((name (car package))
                (repo (cdr package)))
            (when (not (package-installed-p name))
              (let ((package-archives (list repo)))
                 (package-initialize)
                 (package-install name)))))
         packages)
  (package-initialize)
  (delete-other-windows))
#+END_SRC

** The package

Install extensions if they're missing

#+NAME: credmp-package-installer
#+BEGIN_SRC emacs-lisp
(defun init--install-packages ()
  (message "Let's install some packages")
   (packages-install
    ;; this is the only entry here because use-package is used later
    (cons 'use-package melpa)))
(condition-case nil
    (init--install-packages)
  (error
   (package-refresh-contents)
   (init--install-packages)))
(require 'use-package)
#+END_SRC

* Internals
This section is about the internal behavior of Emacs.

** Backup

The default behavior of Emacs is to litter the same directory with temporary files. It looks like auto-save is enabled here, so we'll see how long I tolerate that for.

#+BEGIN_SRC emacs-lisp
(defvar --backup-directory (concat init-dir "backups"))

(if (not (file-exists-p --backup-directory))
    (make-directory --backup-directory t))

(setq backup-directory-alist `(("." . ,--backup-directory)))
(setq make-backup-files t               ; backup of a file the first time it is saved.
      backup-by-copying t               ; don't clobber symlinks
      version-control t                 ; version numbers for backup files
      delete-old-versions t             ; delete excess backup files silently
      delete-by-moving-to-trash t
      kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
      auto-save-default t               ; auto-save every buffer that visits a file
      auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
      auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
  )

  ;; (setq delete-by-moving-to-trash t
  ;;       trash-directory "~/.Trash/emacs")

  (setq backup-directory-alist `(("." . ,(expand-file-name
                                          (concat init-dir "backups")))))
#+END_SRC

** Opening Files

#+BEGIN_SRC emacs-lisp
;; (setq ns-pop-up-frames nil)
#+END_SRC
* Look and feel

Ditch the lousy bars and obnoxious bell.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(defun my-bell-function ())
(setq ring-bell-function 'my-bell-function)
(setq visible-bell nil)
#+END_SRC

#+NAME: credmp-package-installer
#+BEGIN_SRC emacs-lisp
;; (use-package base16-theme
;;  :ensure t
;;  :config
;;  (load-theme 'base16-grayscale-dark t))
(use-package atom-one-dark-theme
  :ensure t
  :config
  (load-theme 'atom-one-dark t))
(if (eq system-type 'windows-nt)
    (set-face-attribute 'default nil :font "Consolas" :height 110))
#+END_SRC

** Icons

Screen real estate is precious, so iconography seems worthwhile to try. This package provides icons that can be used in other configurations.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC

** Mode Line

I really wanted to try and make [[https://github.com/domtronn/all-the-icons.el/wiki/Mode-Line][all-the-icons mode line]] work, but it eludes me. Instead I'm punting and going with [[https://github.com/domtronn/spaceline-all-the-icons.el][spaceline-all-the-icons]].

#+BEGIN_SRC emacs-lisp
(use-package mode-icons
  :ensure t
  :config
  (mode-icons-mode t))

;; (use-package spaceline
;;  :ensure t)
;; (use-package spaceline-all-the-icons
;;   :ensure t
;;   :after spaceline
;;   :config (spaceline-all-the-icons-theme))
#+END_SRC

** Editor
#+BEGIN_SRC emacs-lisp
(use-package linum
  :ensure t
  :config ())
(add-hook 'find-file-hook (lambda () (linum-mode 1)))
#+END_SRC

** Moving Around

*** Bookmarks
#+BEGIN_SRC emacs-lisp
(use-package bm
  :ensure t
  :bind (("C-c =" . bm-toggle)
         ("C-c [" . bm-previous)
         ("C-c ]" . bm-next)))
#+END_SRC

*** Ivy/Counsel/Swiper

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :bind
  (("M-x" . counsel-M-x)
   ("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))

 (use-package swiper
   ;; :pin melpa-stable
   :diminish ivy-mode
   :ensure t
   :bind*
   (("C-s" . swiper)
    ("C-c C-r" . ivy-resume)
    ("C-x C-f" . counsel-find-file)
    ("C-c h f" . counsel-describe-function)
    ("C-c h v" . counsel-describe-variable)
    ("C-c i u" . counsel-unicode-char)
    ("M-i" . counsel-imenu)
    ("C-c g" . counsel-git)
    ("C-c j" . counsel-git-grep)
    ("C-c k" . counsel-ag)
    ("C-c l" . scounsel-locate))
   :config
   (progn
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (define-key read-expression-map (kbd "C-r") #'counsel-expression-history)
     (ivy-set-actions
      'counsel-find-file
      '(("d" (lambda (x) (delete-file (expand-file-name x)))
         "delete"
         )))
     (ivy-set-actions
      'ivy-switch-buffer
      '(("k"
         (lambda (x)
           (kill-buffer x)
           (ivy--reset-state ivy-last))
         "kill")
        ("j"
         ivy--switch-buffer-other-window-action
         "other window")))))

(use-package counsel-projectile
  :ensure t
  :config
  (counsel-projectile-on))

(use-package ivy-hydra :ensure t)
#+END_SRC
* Version Control

#+NAME: magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-|" . magit-status)))
#+END_SRC

* Programming

** Lisp

** C/C++

** C#

** JavaScript

** Markup
#+BEGIN_SRC emacs-lisp
(use-package handlebars-mode
  :ensure t)
#+END_SRC

* Keybindings
** Other Window
#+BEGIN_SRC emacs-lisp
(defun other-window-prev ()
  (interactive)
  (other-window) -1)
#+END_SRC
** Set
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-<tab>") 'other-window)
(global-set-key (kbd "C-S-<tab>") 'other-window-prev)
#+END_SRC
